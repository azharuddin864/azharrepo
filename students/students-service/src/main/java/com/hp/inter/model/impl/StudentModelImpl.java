/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hp.inter.model.impl;

import com.hp.inter.model.Student;
import com.hp.inter.model.StudentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;U_Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @generated
 */
public class StudentModelImpl
	extends BaseModelImpl<Student> implements StudentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the <code>Student</code> interface instead.
	 */
	public static final String TABLE_NAME = "U_Student";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"studentId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"studentName", Types.VARCHAR}, {"collegeName", Types.VARCHAR},
		{"specialization", Types.VARCHAR}, {"studentGpa", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("studentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collegeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specialization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentGpa", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table U_Student (uuid_ VARCHAR(75) null,studentId LONG not null primary key,createDate DATE null,modifiedDate DATE null,studentName VARCHAR(75) null,collegeName VARCHAR(75) null,specialization VARCHAR(75) null,studentGpa DOUBLE)";

	public static final String TABLE_SQL_DROP = "drop table U_Student";

	public static final String ORDER_BY_JPQL =
		" ORDER BY student.studentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY U_Student.studentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COLLEGENAME_COLUMN_BITMASK = 1L;

	public static final long SPECIALIZATION_COLUMN_BITMASK = 2L;

	public static final long STUDENTGPA_COLUMN_BITMASK = 4L;

	public static final long STUDENTNAME_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long STUDENTID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Student)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Student, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Student, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Student)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Student, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Student, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Student>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Student.class.getClassLoader(), Student.class, ModelWrapper.class);

		try {
			Constructor<Student> constructor =
				(Constructor<Student>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Student, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Student, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Student, Object>>();
		Map<String, BiConsumer<Student, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Student, ?>>();

		attributeGetterFunctions.put("uuid", Student::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Student, String>)Student::setUuid);
		attributeGetterFunctions.put("studentId", Student::getStudentId);
		attributeSetterBiConsumers.put(
			"studentId", (BiConsumer<Student, Long>)Student::setStudentId);
		attributeGetterFunctions.put("createDate", Student::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Student, Date>)Student::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Student::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Student, Date>)Student::setModifiedDate);
		attributeGetterFunctions.put("studentName", Student::getStudentName);
		attributeSetterBiConsumers.put(
			"studentName",
			(BiConsumer<Student, String>)Student::setStudentName);
		attributeGetterFunctions.put("collegeName", Student::getCollegeName);
		attributeSetterBiConsumers.put(
			"collegeName",
			(BiConsumer<Student, String>)Student::setCollegeName);
		attributeGetterFunctions.put(
			"specialization", Student::getSpecialization);
		attributeSetterBiConsumers.put(
			"specialization",
			(BiConsumer<Student, String>)Student::setSpecialization);
		attributeGetterFunctions.put("studentGpa", Student::getStudentGpa);
		attributeSetterBiConsumers.put(
			"studentGpa", (BiConsumer<Student, Double>)Student::setStudentGpa);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_studentId = studentId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getStudentName() {
		if (_studentName == null) {
			return "";
		}
		else {
			return _studentName;
		}
	}

	@Override
	public void setStudentName(String studentName) {
		_columnBitmask |= STUDENTNAME_COLUMN_BITMASK;

		if (_originalStudentName == null) {
			_originalStudentName = _studentName;
		}

		_studentName = studentName;
	}

	public String getOriginalStudentName() {
		return GetterUtil.getString(_originalStudentName);
	}

	@Override
	public String getCollegeName() {
		if (_collegeName == null) {
			return "";
		}
		else {
			return _collegeName;
		}
	}

	@Override
	public void setCollegeName(String collegeName) {
		_columnBitmask |= COLLEGENAME_COLUMN_BITMASK;

		if (_originalCollegeName == null) {
			_originalCollegeName = _collegeName;
		}

		_collegeName = collegeName;
	}

	public String getOriginalCollegeName() {
		return GetterUtil.getString(_originalCollegeName);
	}

	@Override
	public String getSpecialization() {
		if (_specialization == null) {
			return "";
		}
		else {
			return _specialization;
		}
	}

	@Override
	public void setSpecialization(String specialization) {
		_columnBitmask |= SPECIALIZATION_COLUMN_BITMASK;

		if (_originalSpecialization == null) {
			_originalSpecialization = _specialization;
		}

		_specialization = specialization;
	}

	public String getOriginalSpecialization() {
		return GetterUtil.getString(_originalSpecialization);
	}

	@Override
	public double getStudentGpa() {
		return _studentGpa;
	}

	@Override
	public void setStudentGpa(double studentGpa) {
		_columnBitmask |= STUDENTGPA_COLUMN_BITMASK;

		if (!_setOriginalStudentGpa) {
			_setOriginalStudentGpa = true;

			_originalStudentGpa = _studentGpa;
		}

		_studentGpa = studentGpa;
	}

	public double getOriginalStudentGpa() {
		return _originalStudentGpa;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Student>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(getUuid());
		studentImpl.setStudentId(getStudentId());
		studentImpl.setCreateDate(getCreateDate());
		studentImpl.setModifiedDate(getModifiedDate());
		studentImpl.setStudentName(getStudentName());
		studentImpl.setCollegeName(getCollegeName());
		studentImpl.setSpecialization(getSpecialization());
		studentImpl.setStudentGpa(getStudentGpa());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Student)) {
			return false;
		}

		Student student = (Student)object;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_setModifiedDate = false;
		_originalStudentName = _studentName;

		_originalCollegeName = _collegeName;

		_originalSpecialization = _specialization;

		_originalStudentGpa = _studentGpa;

		_setOriginalStudentGpa = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.uuid = getUuid();

		String uuid = studentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			studentCacheModel.uuid = null;
		}

		studentCacheModel.studentId = getStudentId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			studentCacheModel.createDate = createDate.getTime();
		}
		else {
			studentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			studentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			studentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		studentCacheModel.studentName = getStudentName();

		String studentName = studentCacheModel.studentName;

		if ((studentName != null) && (studentName.length() == 0)) {
			studentCacheModel.studentName = null;
		}

		studentCacheModel.collegeName = getCollegeName();

		String collegeName = studentCacheModel.collegeName;

		if ((collegeName != null) && (collegeName.length() == 0)) {
			studentCacheModel.collegeName = null;
		}

		studentCacheModel.specialization = getSpecialization();

		String specialization = studentCacheModel.specialization;

		if ((specialization != null) && (specialization.length() == 0)) {
			studentCacheModel.specialization = null;
		}

		studentCacheModel.studentGpa = getStudentGpa();

		return studentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Student)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Student)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Student>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _studentId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _studentName;
	private String _originalStudentName;
	private String _collegeName;
	private String _originalCollegeName;
	private String _specialization;
	private String _originalSpecialization;
	private double _studentGpa;
	private double _originalStudentGpa;
	private boolean _setOriginalStudentGpa;
	private long _columnBitmask;
	private Student _escapedModel;

}